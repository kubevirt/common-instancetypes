{
  "description": "Volume represents a named volume in a vmi.",
  "type": "object",
  "required": [
    "name"
  ],
  "properties": {
    "cloudInitConfigDrive": {
      "description": "Represents a cloud-init config drive user data source. More info: https://cloudinit.readthedocs.io/en/latest/topics/datasources/configdrive.html",
      "type": "object",
      "properties": {
        "networkData": {
          "description": "NetworkData contains config drive inline cloud-init networkdata.",
          "type": "string"
        },
        "networkDataBase64": {
          "description": "NetworkDataBase64 contains config drive cloud-init networkdata as a base64 encoded string.",
          "type": "string"
        },
        "networkDataSecretRef": {
          "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
          "type": "object",
          "properties": {
            "name": {
              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "secretRef": {
          "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
          "type": "object",
          "properties": {
            "name": {
              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "userData": {
          "description": "UserData contains config drive inline cloud-init userdata.",
          "type": "string"
        },
        "userDataBase64": {
          "description": "UserDataBase64 contains config drive cloud-init userdata as a base64 encoded string.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "cloudInitNoCloud": {
      "description": "Represents a cloud-init nocloud user data source. More info: http://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html",
      "type": "object",
      "properties": {
        "networkData": {
          "description": "NetworkData contains NoCloud inline cloud-init networkdata.",
          "type": "string"
        },
        "networkDataBase64": {
          "description": "NetworkDataBase64 contains NoCloud cloud-init networkdata as a base64 encoded string.",
          "type": "string"
        },
        "networkDataSecretRef": {
          "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
          "type": "object",
          "properties": {
            "name": {
              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "secretRef": {
          "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
          "type": "object",
          "properties": {
            "name": {
              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "userData": {
          "description": "UserData contains NoCloud inline cloud-init userdata.",
          "type": "string"
        },
        "userDataBase64": {
          "description": "UserDataBase64 contains NoCloud cloud-init userdata as a base64 encoded string.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "configMap": {
      "description": "ConfigMapVolumeSource adapts a ConfigMap into a volume. More info: https://kubernetes.io/docs/concepts/storage/volumes/#configmap",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap or it's keys must be defined",
          "type": "boolean"
        },
        "volumeLabel": {
          "description": "The volume label of the resulting disk inside the VMI. Different bootstrapping mechanisms require different values. Typical values are \"cidata\" (cloud-init), \"config-2\" (cloud-init) or \"OEMDRV\" (kickstart).",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "containerDisk": {
      "description": "Represents a docker image with an embedded disk.",
      "type": "object",
      "required": [
        "image"
      ],
      "properties": {
        "image": {
          "description": "Image is the name of the image with the embedded disk.",
          "type": "string"
        },
        "imagePullPolicy": {
          "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
          "type": "string"
        },
        "imagePullSecret": {
          "description": "ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.",
          "type": "string"
        },
        "path": {
          "description": "Path defines the path to disk file in the container",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "dataVolume": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "hotpluggable": {
          "description": "Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.",
          "type": "boolean"
        },
        "name": {
          "description": "Name of both the DataVolume and the PVC in the same namespace. After PVC population the DataVolume is garbage collected by default.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "downwardAPI": {
      "description": "DownwardAPIVolumeSource represents a volume containing downward API info.",
      "type": "object",
      "properties": {
        "fields": {
          "description": "Fields is a list of downward API volume file",
          "type": "array",
          "items": {
            "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
            "type": "object",
            "required": [
              "path"
            ],
            "properties": {
              "fieldRef": {
                "description": "ObjectFieldSelector selects an APIVersioned field of an object.",
                "type": "object",
                "required": [
                  "fieldPath"
                ],
                "properties": {
                  "apiVersion": {
                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                    "type": "string"
                  },
                  "fieldPath": {
                    "description": "Path of the field to select in the specified API version.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              },
              "mode": {
                "description": "Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                "type": "integer",
                "format": "int32"
              },
              "path": {
                "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                "type": "string"
              },
              "resourceFieldRef": {
                "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
                "type": "object",
                "required": [
                  "resource"
                ],
                "properties": {
                  "containerName": {
                    "description": "Container name: required for volumes, optional for env vars",
                    "type": "string"
                  },
                  "divisor": {
                    "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n<quantity>        ::= <signedNumber><suffix>\n  (Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n  (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n  (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber>\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n  a. No precision is lost\n  b. No fractional digits will be emitted\n  c. The exponent (or suffix) is as large as possible.\nThe sign will be omitted unless the number is negative.\n\nExamples:\n  1.5 will be serialized as \"1500m\"\n  1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.",
                    "type": "string"
                  },
                  "resource": {
                    "description": "Required: resource to select",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        },
        "volumeLabel": {
          "description": "The volume label of the resulting disk inside the VMI. Different bootstrapping mechanisms require different values. Typical values are \"cidata\" (cloud-init), \"config-2\" (cloud-init) or \"OEMDRV\" (kickstart).",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "downwardMetrics": {
      "description": "DownwardMetricsVolumeSource adds a very small disk to VMIs which contains a limited view of host and guest metrics. The disk content is compatible with vhostmd (https://github.com/vhostmd/vhostmd) and vm-dump-metrics.",
      "type": "object"
    },
    "emptyDisk": {
      "description": "EmptyDisk represents a temporary disk which shares the vmis lifecycle.",
      "type": "object",
      "required": [
        "capacity"
      ],
      "properties": {
        "capacity": {
          "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n<quantity>        ::= <signedNumber><suffix>\n  (Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n  (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n  (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber>\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n  a. No precision is lost\n  b. No fractional digits will be emitted\n  c. The exponent (or suffix) is as large as possible.\nThe sign will be omitted unless the number is negative.\n\nExamples:\n  1.5 will be serialized as \"1500m\"\n  1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "ephemeral": {
      "type": "object",
      "properties": {
        "persistentVolumeClaim": {
          "description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
          "type": "object",
          "required": [
            "claimName"
          ],
          "properties": {
            "claimName": {
              "description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
              "type": "string"
            },
            "readOnly": {
              "description": "Will force the ReadOnly setting in VolumeMounts. Default false.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "hostDisk": {
      "description": "Represents a disk created on the cluster level",
      "type": "object",
      "required": [
        "path",
        "type"
      ],
      "properties": {
        "capacity": {
          "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n<quantity>        ::= <signedNumber><suffix>\n  (Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n  (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n  (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber>\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n  a. No precision is lost\n  b. No fractional digits will be emitted\n  c. The exponent (or suffix) is as large as possible.\nThe sign will be omitted unless the number is negative.\n\nExamples:\n  1.5 will be serialized as \"1500m\"\n  1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.",
          "type": "string"
        },
        "path": {
          "description": "The path to HostDisk image located on the cluster",
          "type": "string"
        },
        "shared": {
          "description": "Shared indicate whether the path is shared between nodes",
          "type": "boolean"
        },
        "type": {
          "description": "Contains information if disk.img exists or should be created allowed options are 'Disk' and 'DiskOrCreate'",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "memoryDump": {
      "type": "object",
      "required": [
        "claimName"
      ],
      "properties": {
        "claimName": {
          "description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
          "type": "string"
        },
        "hotpluggable": {
          "description": "Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.",
          "type": "boolean"
        },
        "readOnly": {
          "description": "Will force the ReadOnly setting in VolumeMounts. Default false.",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "name": {
      "description": "Volume's name. Must be a DNS_LABEL and unique within the vmi. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
      "type": "string"
    },
    "persistentVolumeClaim": {
      "description": "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. Directly attached to the vmi via qemu. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
      "type": "object",
      "required": [
        "claimName"
      ],
      "properties": {
        "claimName": {
          "description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
          "type": "string"
        },
        "hotpluggable": {
          "description": "Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.",
          "type": "boolean"
        },
        "readOnly": {
          "description": "Will force the ReadOnly setting in VolumeMounts. Default false.",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "secret": {
      "description": "SecretVolumeSource adapts a Secret into a volume.",
      "type": "object",
      "properties": {
        "optional": {
          "description": "Specify whether the Secret or it's keys must be defined",
          "type": "boolean"
        },
        "secretName": {
          "description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
          "type": "string"
        },
        "volumeLabel": {
          "description": "The volume label of the resulting disk inside the VMI. Different bootstrapping mechanisms require different values. Typical values are \"cidata\" (cloud-init), \"config-2\" (cloud-init) or \"OEMDRV\" (kickstart).",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "serviceAccount": {
      "description": "ServiceAccountVolumeSource adapts a ServiceAccount into a volume.",
      "type": "object",
      "properties": {
        "serviceAccountName": {
          "description": "Name of the service account in the pod's namespace to use. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "sysprep": {
      "description": "Represents a Sysprep volume source.",
      "type": "object",
      "properties": {
        "configMap": {
          "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
          "type": "object",
          "properties": {
            "name": {
              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "secret": {
          "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
          "type": "object",
          "properties": {
            "name": {
              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  "additionalProperties": false,
  "$schema": "http://json-schema.org/schema#"
}