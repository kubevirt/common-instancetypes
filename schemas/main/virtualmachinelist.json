{
  "description": "VirtualMachineList is a list of virtualmachines",
  "type": "object",
  "required": [
    "items"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "items": {
      "type": "array",
      "items": {
        "description": "VirtualMachine handles the VirtualMachines that are not running or are in a stopped state The VirtualMachine contains the template to create the VirtualMachineInstance. It also mirrors the running state of the created VirtualMachineInstance in its status.",
        "type": "object",
        "required": [
          "spec"
        ],
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "metadata": {
            "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
            "type": "object",
            "properties": {
              "annotations": {
                "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "clusterName": {
                "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.",
                "type": "string"
              },
              "creationTimestamp": {
                "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                "type": [
                  "string",
                  "null"
                ]
              },
              "deletionGracePeriodSeconds": {
                "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
                "type": "integer",
                "format": "int64"
              },
              "deletionTimestamp": {
                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                "type": "string",
                "format": "date-time"
              },
              "finalizers": {
                "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "x-kubernetes-patch-strategy": "merge"
              },
              "generateName": {
                "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
                "type": "string"
              },
              "generation": {
                "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
                "type": "integer",
                "format": "int64"
              },
              "labels": {
                "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "managedFields": {
                "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
                "type": "array",
                "items": {
                  "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
                  "type": "object",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
                      "type": "string"
                    },
                    "fieldsType": {
                      "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
                      "type": "string"
                    },
                    "fieldsV1": {
                      "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
                      "type": "object"
                    },
                    "manager": {
                      "description": "Manager is an identifier of the workflow managing these fields.",
                      "type": "string"
                    },
                    "operation": {
                      "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                      "type": "string"
                    },
                    "subresource": {
                      "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
                      "type": "string"
                    },
                    "time": {
                      "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "name": {
                "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                "type": "string"
              },
              "namespace": {
                "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
                "type": "string"
              },
              "ownerReferences": {
                "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
                "type": "array",
                "items": {
                  "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
                  "type": "object",
                  "required": [
                    "apiVersion",
                    "kind",
                    "name",
                    "uid"
                  ],
                  "properties": {
                    "apiVersion": {
                      "description": "API version of the referent.",
                      "type": "string"
                    },
                    "blockOwnerDeletion": {
                      "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                      "type": "boolean"
                    },
                    "controller": {
                      "description": "If true, this reference points to the managing controller.",
                      "type": "boolean"
                    },
                    "kind": {
                      "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                      "type": "string"
                    },
                    "uid": {
                      "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "x-kubernetes-patch-merge-key": "uid",
                "x-kubernetes-patch-strategy": "merge"
              },
              "resourceVersion": {
                "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                "type": "string"
              },
              "selfLink": {
                "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
                "type": "string"
              },
              "uid": {
                "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "spec": {
            "description": "VirtualMachineSpec describes how the proper VirtualMachine should look like",
            "type": "object",
            "required": [
              "template"
            ],
            "properties": {
              "dataVolumeTemplates": {
                "description": "dataVolumeTemplates is a list of dataVolumes that the VirtualMachineInstance template can reference. DataVolumes in this list are dynamically created for the VirtualMachine and are tied to the VirtualMachine's life-cycle.",
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "spec"
                  ],
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
                      "type": "object",
                      "properties": {
                        "annotations": {
                          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "clusterName": {
                          "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.",
                          "type": "string"
                        },
                        "creationTimestamp": {
                          "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "deletionGracePeriodSeconds": {
                          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
                          "type": "integer",
                          "format": "int64"
                        },
                        "deletionTimestamp": {
                          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "finalizers": {
                          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "x-kubernetes-patch-strategy": "merge"
                        },
                        "generateName": {
                          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
                          "type": "string"
                        },
                        "generation": {
                          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
                          "type": "integer",
                          "format": "int64"
                        },
                        "labels": {
                          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "managedFields": {
                          "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
                          "type": "array",
                          "items": {
                            "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
                            "type": "object",
                            "properties": {
                              "apiVersion": {
                                "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
                                "type": "string"
                              },
                              "fieldsType": {
                                "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
                                "type": "string"
                              },
                              "fieldsV1": {
                                "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
                                "type": "object"
                              },
                              "manager": {
                                "description": "Manager is an identifier of the workflow managing these fields.",
                                "type": "string"
                              },
                              "operation": {
                                "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                                "type": "string"
                              },
                              "subresource": {
                                "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
                                "type": "string"
                              },
                              "time": {
                                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                                "type": "string",
                                "format": "date-time"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "name": {
                          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                          "type": "string"
                        },
                        "namespace": {
                          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
                          "type": "string"
                        },
                        "ownerReferences": {
                          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
                          "type": "array",
                          "items": {
                            "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
                            "type": "object",
                            "required": [
                              "apiVersion",
                              "kind",
                              "name",
                              "uid"
                            ],
                            "properties": {
                              "apiVersion": {
                                "description": "API version of the referent.",
                                "type": "string"
                              },
                              "blockOwnerDeletion": {
                                "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                                "type": "boolean"
                              },
                              "controller": {
                                "description": "If true, this reference points to the managing controller.",
                                "type": "boolean"
                              },
                              "kind": {
                                "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                                "type": "string"
                              },
                              "uid": {
                                "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          },
                          "x-kubernetes-patch-merge-key": "uid",
                          "x-kubernetes-patch-strategy": "merge"
                        },
                        "resourceVersion": {
                          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                          "type": "string"
                        },
                        "selfLink": {
                          "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
                          "type": "string"
                        },
                        "uid": {
                          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "spec": {
                      "description": "DataVolumeSpec defines the DataVolume type specification",
                      "type": "object",
                      "properties": {
                        "checkpoints": {
                          "description": "Checkpoints is a list of DataVolumeCheckpoints, representing stages in a multistage import.",
                          "type": "array",
                          "items": {
                            "description": "DataVolumeCheckpoint defines a stage in a warm migration.",
                            "type": "object",
                            "required": [
                              "previous",
                              "current"
                            ],
                            "properties": {
                              "current": {
                                "description": "Current is the identifier of the snapshot created for this checkpoint.",
                                "type": "string"
                              },
                              "previous": {
                                "description": "Previous is the identifier of the snapshot from the previous checkpoint.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "contentType": {
                          "description": "DataVolumeContentType options: \"kubevirt\", \"archive\"",
                          "type": "string"
                        },
                        "finalCheckpoint": {
                          "description": "FinalCheckpoint indicates whether the current DataVolumeCheckpoint is the final checkpoint.",
                          "type": "boolean"
                        },
                        "preallocation": {
                          "description": "Preallocation controls whether storage for DataVolumes should be allocated in advance.",
                          "type": "boolean"
                        },
                        "priorityClassName": {
                          "description": "PriorityClassName for Importer, Cloner and Uploader pod",
                          "type": "string"
                        },
                        "pvc": {
                          "description": "PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes",
                          "type": "object",
                          "properties": {
                            "accessModes": {
                              "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "dataSource": {
                              "description": "TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.",
                              "type": "object",
                              "required": [
                                "kind",
                                "name"
                              ],
                              "properties": {
                                "apiGroup": {
                                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
                                  "type": "string"
                                },
                                "kind": {
                                  "description": "Kind is the type of resource being referenced",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name is the name of resource being referenced",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "dataSourceRef": {
                              "description": "TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.",
                              "type": "object",
                              "required": [
                                "kind",
                                "name"
                              ],
                              "properties": {
                                "apiGroup": {
                                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
                                  "type": "string"
                                },
                                "kind": {
                                  "description": "Kind is the type of resource being referenced",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name is the name of resource being referenced",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "resources": {
                              "description": "ResourceRequirements describes the compute resource requirements.",
                              "type": "object",
                              "properties": {
                                "limits": {
                                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                  "type": "object",
                                  "additionalProperties": {
                                    "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n<quantity>        ::= <signedNumber><suffix>\n  (Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n  (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n  (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber>\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n  a. No precision is lost\n  b. No fractional digits will be emitted\n  c. The exponent (or suffix) is as large as possible.\nThe sign will be omitted unless the number is negative.\n\nExamples:\n  1.5 will be serialized as \"1500m\"\n  1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.",
                                    "type": "string"
                                  }
                                },
                                "requests": {
                                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                  "type": "object",
                                  "additionalProperties": {
                                    "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n<quantity>        ::= <signedNumber><suffix>\n  (Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n  (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n  (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber>\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n  a. No precision is lost\n  b. No fractional digits will be emitted\n  c. The exponent (or suffix) is as large as possible.\nThe sign will be omitted unless the number is negative.\n\nExamples:\n  1.5 will be serialized as \"1500m\"\n  1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.",
                                    "type": "string"
                                  }
                                }
                              },
                              "additionalProperties": false
                            },
                            "selector": {
                              "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                              "type": "object",
                              "properties": {
                                "matchExpressions": {
                                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                  "type": "array",
                                  "items": {
                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                    "type": "object",
                                    "required": [
                                      "key",
                                      "operator"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "key is the label key that the selector applies to.",
                                        "type": "string",
                                        "x-kubernetes-patch-merge-key": "key",
                                        "x-kubernetes-patch-strategy": "merge"
                                      },
                                      "operator": {
                                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                        "type": "string"
                                      },
                                      "values": {
                                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "additionalProperties": false
                                  }
                                },
                                "matchLabels": {
                                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              },
                              "additionalProperties": false
                            },
                            "storageClassName": {
                              "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
                              "type": "string"
                            },
                            "volumeMode": {
                              "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
                              "type": "string"
                            },
                            "volumeName": {
                              "description": "VolumeName is the binding reference to the PersistentVolume backing this claim.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        "source": {
                          "description": "DataVolumeSource represents the source for our Data Volume, this can be HTTP, Imageio, S3, Registry or an existing PVC",
                          "type": "object",
                          "properties": {
                            "blank": {
                              "description": "DataVolumeBlankImage provides the parameters to create a new raw blank image for the PVC",
                              "type": "object"
                            },
                            "http": {
                              "description": "DataVolumeSourceHTTP can be either an http or https endpoint, with an optional basic auth user name and password, and an optional configmap containing additional CAs",
                              "type": "object",
                              "required": [
                                "url"
                              ],
                              "properties": {
                                "certConfigMap": {
                                  "description": "CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate",
                                  "type": "string"
                                },
                                "extraHeaders": {
                                  "description": "ExtraHeaders is a list of strings containing extra headers to include with HTTP transfer requests",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "secretExtraHeaders": {
                                  "description": "SecretExtraHeaders is a list of Secret references, each containing an extra HTTP header that may include sensitive information",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "secretRef": {
                                  "description": "SecretRef A Secret reference, the secret should contain accessKeyId (user name) base64 encoded, and secretKey (password) also base64 encoded",
                                  "type": "string"
                                },
                                "url": {
                                  "description": "URL is the URL of the http(s) endpoint",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "imageio": {
                              "description": "DataVolumeSourceImageIO provides the parameters to create a Data Volume from an imageio source",
                              "type": "object",
                              "required": [
                                "url",
                                "diskId"
                              ],
                              "properties": {
                                "certConfigMap": {
                                  "description": "CertConfigMap provides a reference to the CA cert",
                                  "type": "string"
                                },
                                "diskId": {
                                  "description": "DiskID provides id of a disk to be imported",
                                  "type": "string"
                                },
                                "secretRef": {
                                  "description": "SecretRef provides the secret reference needed to access the ovirt-engine",
                                  "type": "string"
                                },
                                "url": {
                                  "description": "URL is the URL of the ovirt-engine",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "pvc": {
                              "description": "DataVolumeSourcePVC provides the parameters to create a Data Volume from an existing PVC",
                              "type": "object",
                              "required": [
                                "namespace",
                                "name"
                              ],
                              "properties": {
                                "name": {
                                  "description": "The name of the source PVC",
                                  "type": "string"
                                },
                                "namespace": {
                                  "description": "The namespace of the source PVC",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "registry": {
                              "description": "DataVolumeSourceRegistry provides the parameters to create a Data Volume from an registry source",
                              "type": "object",
                              "properties": {
                                "certConfigMap": {
                                  "description": "CertConfigMap provides a reference to the Registry certs",
                                  "type": "string"
                                },
                                "imageStream": {
                                  "description": "ImageStream is the name of image stream for import",
                                  "type": "string"
                                },
                                "pullMethod": {
                                  "description": "PullMethod can be either \"pod\" (default import), or \"node\" (node docker cache based import)",
                                  "type": "string"
                                },
                                "secretRef": {
                                  "description": "SecretRef provides the secret reference needed to access the Registry source",
                                  "type": "string"
                                },
                                "url": {
                                  "description": "URL is the url of the registry source (starting with the scheme: docker, oci-archive)",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "s3": {
                              "description": "DataVolumeSourceS3 provides the parameters to create a Data Volume from an S3 source",
                              "type": "object",
                              "required": [
                                "url"
                              ],
                              "properties": {
                                "certConfigMap": {
                                  "description": "CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate",
                                  "type": "string"
                                },
                                "secretRef": {
                                  "description": "SecretRef provides the secret reference needed to access the S3 source",
                                  "type": "string"
                                },
                                "url": {
                                  "description": "URL is the url of the S3 source",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "upload": {
                              "description": "DataVolumeSourceUpload provides the parameters to create a Data Volume by uploading the source",
                              "type": "object"
                            },
                            "vddk": {
                              "description": "DataVolumeSourceVDDK provides the parameters to create a Data Volume from a Vmware source",
                              "type": "object",
                              "properties": {
                                "backingFile": {
                                  "description": "BackingFile is the path to the virtual hard disk to migrate from vCenter/ESXi",
                                  "type": "string"
                                },
                                "initImageURL": {
                                  "description": "InitImageURL is an optional URL to an image containing an extracted VDDK library, overrides v2v-vmware config map",
                                  "type": "string"
                                },
                                "secretRef": {
                                  "description": "SecretRef provides a reference to a secret containing the username and password needed to access the vCenter or ESXi host",
                                  "type": "string"
                                },
                                "thumbprint": {
                                  "description": "Thumbprint is the certificate thumbprint of the vCenter or ESXi host",
                                  "type": "string"
                                },
                                "url": {
                                  "description": "URL is the URL of the vCenter or ESXi host with the VM to migrate",
                                  "type": "string"
                                },
                                "uuid": {
                                  "description": "UUID is the UUID of the virtual machine that the backing file is attached to in vCenter/ESXi",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "additionalProperties": false
                        },
                        "sourceRef": {
                          "description": "DataVolumeSourceRef defines an indirect reference to the source of data for the DataVolume",
                          "type": "object",
                          "required": [
                            "kind",
                            "name"
                          ],
                          "properties": {
                            "kind": {
                              "description": "The kind of the source reference, currently only \"DataSource\" is supported",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the source reference",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "The namespace of the source reference, defaults to the DataVolume namespace",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        "storage": {
                          "description": "StorageSpec defines the Storage type specification",
                          "type": "object",
                          "properties": {
                            "accessModes": {
                              "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "dataSource": {
                              "description": "TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.",
                              "type": "object",
                              "required": [
                                "kind",
                                "name"
                              ],
                              "properties": {
                                "apiGroup": {
                                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
                                  "type": "string"
                                },
                                "kind": {
                                  "description": "Kind is the type of resource being referenced",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name is the name of resource being referenced",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "resources": {
                              "description": "ResourceRequirements describes the compute resource requirements.",
                              "type": "object",
                              "properties": {
                                "limits": {
                                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                  "type": "object",
                                  "additionalProperties": {
                                    "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n<quantity>        ::= <signedNumber><suffix>\n  (Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n  (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n  (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber>\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n  a. No precision is lost\n  b. No fractional digits will be emitted\n  c. The exponent (or suffix) is as large as possible.\nThe sign will be omitted unless the number is negative.\n\nExamples:\n  1.5 will be serialized as \"1500m\"\n  1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.",
                                    "type": "string"
                                  }
                                },
                                "requests": {
                                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                  "type": "object",
                                  "additionalProperties": {
                                    "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n<quantity>        ::= <signedNumber><suffix>\n  (Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n  (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n  (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber>\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n  a. No precision is lost\n  b. No fractional digits will be emitted\n  c. The exponent (or suffix) is as large as possible.\nThe sign will be omitted unless the number is negative.\n\nExamples:\n  1.5 will be serialized as \"1500m\"\n  1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.",
                                    "type": "string"
                                  }
                                }
                              },
                              "additionalProperties": false
                            },
                            "selector": {
                              "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                              "type": "object",
                              "properties": {
                                "matchExpressions": {
                                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                  "type": "array",
                                  "items": {
                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                    "type": "object",
                                    "required": [
                                      "key",
                                      "operator"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "key is the label key that the selector applies to.",
                                        "type": "string",
                                        "x-kubernetes-patch-merge-key": "key",
                                        "x-kubernetes-patch-strategy": "merge"
                                      },
                                      "operator": {
                                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                        "type": "string"
                                      },
                                      "values": {
                                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "additionalProperties": false
                                  }
                                },
                                "matchLabels": {
                                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              },
                              "additionalProperties": false
                            },
                            "storageClassName": {
                              "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
                              "type": "string"
                            },
                            "volumeMode": {
                              "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
                              "type": "string"
                            },
                            "volumeName": {
                              "description": "VolumeName is the binding reference to the PersistentVolume backing this claim.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "status": {
                      "type": "object",
                      "nullable": true
                    }
                  },
                  "additionalProperties": false
                }
              },
              "instancetype": {
                "description": "InstancetypeMatcher references a instancetype that is used to fill fields in the VMI template.",
                "type": "object",
                "properties": {
                  "inferFromVolume": {
                    "description": "InferFromVolume lists the name of a volume that should be used to infer or discover the instancetype to be used through known annotations on the underlying resource. Once applied to the InstancetypeMatcher this field is removed.",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind specifies which instancetype resource is referenced. Allowed values are: \"VirtualMachineInstancetype\" and \"VirtualMachineClusterInstancetype\". If not specified, \"VirtualMachineClusterInstancetype\" is used by default.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the VirtualMachineInstancetype or VirtualMachineClusterInstancetype",
                    "type": "string"
                  },
                  "revisionName": {
                    "description": "RevisionName specifies a ControllerRevision containing a specific copy of the VirtualMachineInstancetype or VirtualMachineClusterInstancetype to be used. This is initially captured the first time the instancetype is applied to the VirtualMachineInstance.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              },
              "preference": {
                "description": "PreferenceMatcher references a set of preference that is used to fill fields in the VMI template.",
                "type": "object",
                "properties": {
                  "inferFromVolume": {
                    "description": "InferFromVolume lists the name of a volume that should be used to infer or discover the preference to be used through known annotations on the underlying resource. Once applied to the PreferenceMatcher this field is removed.",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind specifies which preference resource is referenced. Allowed values are: \"VirtualMachinePreference\" and \"VirtualMachineClusterPreference\". If not specified, \"VirtualMachineClusterPreference\" is used by default.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the VirtualMachinePreference or VirtualMachineClusterPreference",
                    "type": "string"
                  },
                  "revisionName": {
                    "description": "RevisionName specifies a ControllerRevision containing a specific copy of the VirtualMachinePreference or VirtualMachineClusterPreference to be used. This is initially captured the first time the instancetype is applied to the VirtualMachineInstance.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              },
              "runStrategy": {
                "description": "Running state indicates the requested running state of the VirtualMachineInstance mutually exclusive with Running",
                "type": "string"
              },
              "running": {
                "description": "Running controls whether the associatied VirtualMachineInstance is created or not Mutually exclusive with RunStrategy",
                "type": "boolean"
              },
              "template": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
                    "type": "object",
                    "properties": {
                      "annotations": {
                        "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "clusterName": {
                        "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.",
                        "type": "string"
                      },
                      "creationTimestamp": {
                        "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "deletionGracePeriodSeconds": {
                        "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "deletionTimestamp": {
                        "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                        "type": "string",
                        "format": "date-time"
                      },
                      "finalizers": {
                        "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "x-kubernetes-patch-strategy": "merge"
                      },
                      "generateName": {
                        "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
                        "type": "string"
                      },
                      "generation": {
                        "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "labels": {
                        "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "managedFields": {
                        "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
                        "type": "array",
                        "items": {
                          "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
                          "type": "object",
                          "properties": {
                            "apiVersion": {
                              "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
                              "type": "string"
                            },
                            "fieldsType": {
                              "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
                              "type": "string"
                            },
                            "fieldsV1": {
                              "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
                              "type": "object"
                            },
                            "manager": {
                              "description": "Manager is an identifier of the workflow managing these fields.",
                              "type": "string"
                            },
                            "operation": {
                              "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                              "type": "string"
                            },
                            "subresource": {
                              "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
                              "type": "string"
                            },
                            "time": {
                              "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                              "type": "string",
                              "format": "date-time"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "name": {
                        "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
                        "type": "string"
                      },
                      "ownerReferences": {
                        "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
                        "type": "array",
                        "items": {
                          "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
                          "type": "object",
                          "required": [
                            "apiVersion",
                            "kind",
                            "name",
                            "uid"
                          ],
                          "properties": {
                            "apiVersion": {
                              "description": "API version of the referent.",
                              "type": "string"
                            },
                            "blockOwnerDeletion": {
                              "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                              "type": "boolean"
                            },
                            "controller": {
                              "description": "If true, this reference points to the managing controller.",
                              "type": "boolean"
                            },
                            "kind": {
                              "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                              "type": "string"
                            },
                            "uid": {
                              "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        "x-kubernetes-patch-merge-key": "uid",
                        "x-kubernetes-patch-strategy": "merge"
                      },
                      "resourceVersion": {
                        "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                        "type": "string"
                      },
                      "selfLink": {
                        "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
                        "type": "string"
                      },
                      "uid": {
                        "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "spec": {
                    "description": "VirtualMachineInstanceSpec is a description of a VirtualMachineInstance.",
                    "type": "object",
                    "required": [
                      "domain"
                    ],
                    "properties": {
                      "accessCredentials": {
                        "description": "Specifies a set of public keys to inject into the vm guest",
                        "type": "array",
                        "items": {
                          "description": "AccessCredential represents a credential source that can be used to authorize remote access to the vm guest Only one of its members may be specified.",
                          "type": "object",
                          "properties": {
                            "sshPublicKey": {
                              "description": "SSHPublicKeyAccessCredential represents a source and propagation method for injecting ssh public keys into a vm guest",
                              "type": "object",
                              "required": [
                                "source",
                                "propagationMethod"
                              ],
                              "properties": {
                                "propagationMethod": {
                                  "description": "SSHPublicKeyAccessCredentialPropagationMethod represents the method used to inject a ssh public key into the vm guest. Only one of its members may be specified.",
                                  "type": "object",
                                  "properties": {
                                    "configDrive": {
                                      "type": "object"
                                    },
                                    "qemuGuestAgent": {
                                      "type": "object",
                                      "required": [
                                        "users"
                                      ],
                                      "properties": {
                                        "users": {
                                          "description": "Users represents a list of guest users that should have the ssh public keys added to their authorized_keys file.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "x-kubernetes-list-type": "set"
                                        }
                                      },
                                      "additionalProperties": false
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "source": {
                                  "description": "SSHPublicKeyAccessCredentialSource represents where to retrieve the ssh key credentials Only one of its members may be specified.",
                                  "type": "object",
                                  "properties": {
                                    "secret": {
                                      "type": "object",
                                      "required": [
                                        "secretName"
                                      ],
                                      "properties": {
                                        "secretName": {
                                          "description": "SecretName represents the name of the secret in the VMI's namespace",
                                          "type": "string"
                                        }
                                      },
                                      "additionalProperties": false
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "additionalProperties": false
                            },
                            "userPassword": {
                              "description": "UserPasswordAccessCredential represents a source and propagation method for injecting user passwords into a vm guest Only one of its members may be specified.",
                              "type": "object",
                              "required": [
                                "source",
                                "propagationMethod"
                              ],
                              "properties": {
                                "propagationMethod": {
                                  "description": "UserPasswordAccessCredentialPropagationMethod represents the method used to inject a user passwords into the vm guest. Only one of its members may be specified.",
                                  "type": "object",
                                  "properties": {
                                    "qemuGuestAgent": {
                                      "type": "object"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "source": {
                                  "description": "UserPasswordAccessCredentialSource represents where to retrieve the user password credentials Only one of its members may be specified.",
                                  "type": "object",
                                  "properties": {
                                    "secret": {
                                      "type": "object",
                                      "required": [
                                        "secretName"
                                      ],
                                      "properties": {
                                        "secretName": {
                                          "description": "SecretName represents the name of the secret in the VMI's namespace",
                                          "type": "string"
                                        }
                                      },
                                      "additionalProperties": false
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "additionalProperties": false
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "affinity": {
                        "description": "Affinity is a group of affinity scheduling rules.",
                        "type": "object",
                        "properties": {
                          "nodeAffinity": {
                            "description": "Node affinity is a group of node affinity scheduling rules.",
                            "type": "object",
                            "properties": {
                              "preferredDuringSchedulingIgnoredDuringExecution": {
                                "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
                                "type": "array",
                                "items": {
                                  "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                                  "type": "object",
                                  "required": [
                                    "weight",
                                    "preference"
                                  ],
                                  "properties": {
                                    "preference": {
                                      "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                                      "type": "object",
                                      "properties": {
                                        "matchExpressions": {
                                          "description": "A list of node selector requirements by node's labels.",
                                          "type": "array",
                                          "items": {
                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "description": "The label key that the selector applies to.",
                                                "type": "string"
                                              },
                                              "operator": {
                                                "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "additionalProperties": false
                                          }
                                        },
                                        "matchFields": {
                                          "description": "A list of node selector requirements by node's fields.",
                                          "type": "array",
                                          "items": {
                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "description": "The label key that the selector applies to.",
                                                "type": "string"
                                              },
                                              "operator": {
                                                "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "additionalProperties": false
                                          }
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "weight": {
                                      "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                                      "type": "integer",
                                      "format": "int32"
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "requiredDuringSchedulingIgnoredDuringExecution": {
                                "description": "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.",
                                "type": "object",
                                "required": [
                                  "nodeSelectorTerms"
                                ],
                                "properties": {
                                  "nodeSelectorTerms": {
                                    "description": "Required. A list of node selector terms. The terms are ORed.",
                                    "type": "array",
                                    "items": {
                                      "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                                      "type": "object",
                                      "properties": {
                                        "matchExpressions": {
                                          "description": "A list of node selector requirements by node's labels.",
                                          "type": "array",
                                          "items": {
                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "description": "The label key that the selector applies to.",
                                                "type": "string"
                                              },
                                              "operator": {
                                                "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "additionalProperties": false
                                          }
                                        },
                                        "matchFields": {
                                          "description": "A list of node selector requirements by node's fields.",
                                          "type": "array",
                                          "items": {
                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "description": "The label key that the selector applies to.",
                                                "type": "string"
                                              },
                                              "operator": {
                                                "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "additionalProperties": false
                                          }
                                        }
                                      },
                                      "additionalProperties": false
                                    }
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          },
                          "podAffinity": {
                            "description": "Pod affinity is a group of inter pod affinity scheduling rules.",
                            "type": "object",
                            "properties": {
                              "preferredDuringSchedulingIgnoredDuringExecution": {
                                "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                                "type": "array",
                                "items": {
                                  "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                                  "type": "object",
                                  "required": [
                                    "weight",
                                    "podAffinityTerm"
                                  ],
                                  "properties": {
                                    "podAffinityTerm": {
                                      "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                      "type": "object",
                                      "required": [
                                        "topologyKey"
                                      ],
                                      "properties": {
                                        "labelSelector": {
                                          "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                          "type": "object",
                                          "properties": {
                                            "matchExpressions": {
                                              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                              "type": "array",
                                              "items": {
                                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                "type": "object",
                                                "required": [
                                                  "key",
                                                  "operator"
                                                ],
                                                "properties": {
                                                  "key": {
                                                    "description": "key is the label key that the selector applies to.",
                                                    "type": "string",
                                                    "x-kubernetes-patch-merge-key": "key",
                                                    "x-kubernetes-patch-strategy": "merge"
                                                  },
                                                  "operator": {
                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                    "type": "string"
                                                  },
                                                  "values": {
                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "additionalProperties": false
                                              }
                                            },
                                            "matchLabels": {
                                              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                              "type": "object",
                                              "additionalProperties": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "additionalProperties": false
                                        },
                                        "namespaceSelector": {
                                          "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                          "type": "object",
                                          "properties": {
                                            "matchExpressions": {
                                              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                              "type": "array",
                                              "items": {
                                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                "type": "object",
                                                "required": [
                                                  "key",
                                                  "operator"
                                                ],
                                                "properties": {
                                                  "key": {
                                                    "description": "key is the label key that the selector applies to.",
                                                    "type": "string",
                                                    "x-kubernetes-patch-merge-key": "key",
                                                    "x-kubernetes-patch-strategy": "merge"
                                                  },
                                                  "operator": {
                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                    "type": "string"
                                                  },
                                                  "values": {
                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "additionalProperties": false
                                              }
                                            },
                                            "matchLabels": {
                                              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                              "type": "object",
                                              "additionalProperties": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "additionalProperties": false
                                        },
                                        "namespaces": {
                                          "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "topologyKey": {
                                          "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                          "type": "string"
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "weight": {
                                      "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                                      "type": "integer",
                                      "format": "int32"
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "requiredDuringSchedulingIgnoredDuringExecution": {
                                "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                                "type": "array",
                                "items": {
                                  "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                  "type": "object",
                                  "required": [
                                    "topologyKey"
                                  ],
                                  "properties": {
                                    "labelSelector": {
                                      "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                      "type": "object",
                                      "properties": {
                                        "matchExpressions": {
                                          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                          "type": "array",
                                          "items": {
                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "description": "key is the label key that the selector applies to.",
                                                "type": "string",
                                                "x-kubernetes-patch-merge-key": "key",
                                                "x-kubernetes-patch-strategy": "merge"
                                              },
                                              "operator": {
                                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "additionalProperties": false
                                          }
                                        },
                                        "matchLabels": {
                                          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "namespaceSelector": {
                                      "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                      "type": "object",
                                      "properties": {
                                        "matchExpressions": {
                                          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                          "type": "array",
                                          "items": {
                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "description": "key is the label key that the selector applies to.",
                                                "type": "string",
                                                "x-kubernetes-patch-merge-key": "key",
                                                "x-kubernetes-patch-strategy": "merge"
                                              },
                                              "operator": {
                                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "additionalProperties": false
                                          }
                                        },
                                        "matchLabels": {
                                          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "namespaces": {
                                      "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "topologyKey": {
                                      "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              }
                            },
                            "additionalProperties": false
                          },
                          "podAntiAffinity": {
                            "description": "Pod anti affinity is a group of inter pod anti affinity scheduling rules.",
                            "type": "object",
                            "properties": {
                              "preferredDuringSchedulingIgnoredDuringExecution": {
                                "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                                "type": "array",
                                "items": {
                                  "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                                  "type": "object",
                                  "required": [
                                    "weight",
                                    "podAffinityTerm"
                                  ],
                                  "properties": {
                                    "podAffinityTerm": {
                                      "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                      "type": "object",
                                      "required": [
                                        "topologyKey"
                                      ],
                                      "properties": {
                                        "labelSelector": {
                                          "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                          "type": "object",
                                          "properties": {
                                            "matchExpressions": {
                                              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                              "type": "array",
                                              "items": {
                                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                "type": "object",
                                                "required": [
                                                  "key",
                                                  "operator"
                                                ],
                                                "properties": {
                                                  "key": {
                                                    "description": "key is the label key that the selector applies to.",
                                                    "type": "string",
                                                    "x-kubernetes-patch-merge-key": "key",
                                                    "x-kubernetes-patch-strategy": "merge"
                                                  },
                                                  "operator": {
                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                    "type": "string"
                                                  },
                                                  "values": {
                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "additionalProperties": false
                                              }
                                            },
                                            "matchLabels": {
                                              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                              "type": "object",
                                              "additionalProperties": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "additionalProperties": false
                                        },
                                        "namespaceSelector": {
                                          "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                          "type": "object",
                                          "properties": {
                                            "matchExpressions": {
                                              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                              "type": "array",
                                              "items": {
                                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                "type": "object",
                                                "required": [
                                                  "key",
                                                  "operator"
                                                ],
                                                "properties": {
                                                  "key": {
                                                    "description": "key is the label key that the selector applies to.",
                                                    "type": "string",
                                                    "x-kubernetes-patch-merge-key": "key",
                                                    "x-kubernetes-patch-strategy": "merge"
                                                  },
                                                  "operator": {
                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                    "type": "string"
                                                  },
                                                  "values": {
                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "additionalProperties": false
                                              }
                                            },
                                            "matchLabels": {
                                              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                              "type": "object",
                                              "additionalProperties": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "additionalProperties": false
                                        },
                                        "namespaces": {
                                          "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "topologyKey": {
                                          "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                          "type": "string"
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "weight": {
                                      "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                                      "type": "integer",
                                      "format": "int32"
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "requiredDuringSchedulingIgnoredDuringExecution": {
                                "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                                "type": "array",
                                "items": {
                                  "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                  "type": "object",
                                  "required": [
                                    "topologyKey"
                                  ],
                                  "properties": {
                                    "labelSelector": {
                                      "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                      "type": "object",
                                      "properties": {
                                        "matchExpressions": {
                                          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                          "type": "array",
                                          "items": {
                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "description": "key is the label key that the selector applies to.",
                                                "type": "string",
                                                "x-kubernetes-patch-merge-key": "key",
                                                "x-kubernetes-patch-strategy": "merge"
                                              },
                                              "operator": {
                                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "additionalProperties": false
                                          }
                                        },
                                        "matchLabels": {
                                          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "namespaceSelector": {
                                      "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                                      "type": "object",
                                      "properties": {
                                        "matchExpressions": {
                                          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                          "type": "array",
                                          "items": {
                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "description": "key is the label key that the selector applies to.",
                                                "type": "string",
                                                "x-kubernetes-patch-merge-key": "key",
                                                "x-kubernetes-patch-strategy": "merge"
                                              },
                                              "operator": {
                                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "additionalProperties": false
                                          }
                                        },
                                        "matchLabels": {
                                          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "namespaces": {
                                      "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "topologyKey": {
                                      "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      },
                      "dnsConfig": {
                        "description": "PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.",
                        "type": "object",
                        "properties": {
                          "nameservers": {
                            "description": "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "options": {
                            "description": "A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.",
                            "type": "array",
                            "items": {
                              "description": "PodDNSConfigOption defines DNS resolver options of a pod.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Required.",
                                  "type": "string"
                                },
                                "value": {
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "searches": {
                            "description": "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "additionalProperties": false
                      },
                      "dnsPolicy": {
                        "description": "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.",
                        "type": "string"
                      },
                      "domain": {
                        "type": "object",
                        "required": [
                          "devices"
                        ],
                        "properties": {
                          "chassis": {
                            "description": "Chassis specifies the chassis info passed to the domain.",
                            "type": "object",
                            "properties": {
                              "asset": {
                                "type": "string"
                              },
                              "manufacturer": {
                                "type": "string"
                              },
                              "serial": {
                                "type": "string"
                              },
                              "sku": {
                                "type": "string"
                              },
                              "version": {
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          },
                          "clock": {
                            "description": "Represents the clock and timers of a vmi.",
                            "type": "object",
                            "properties": {
                              "timer": {
                                "description": "Represents all available timers in a vmi.",
                                "type": "object",
                                "properties": {
                                  "hpet": {
                                    "type": "object",
                                    "properties": {
                                      "present": {
                                        "description": "Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true.",
                                        "type": "boolean"
                                      },
                                      "tickPolicy": {
                                        "description": "TickPolicy determines what happens when QEMU misses a deadline for injecting a tick to the guest. One of \"delay\", \"catchup\", \"merge\", \"discard\".",
                                        "type": "string"
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "hyperv": {
                                    "type": "object",
                                    "properties": {
                                      "present": {
                                        "description": "Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true.",
                                        "type": "boolean"
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "kvm": {
                                    "type": "object",
                                    "properties": {
                                      "present": {
                                        "description": "Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true.",
                                        "type": "boolean"
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "pit": {
                                    "type": "object",
                                    "properties": {
                                      "present": {
                                        "description": "Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true.",
                                        "type": "boolean"
                                      },
                                      "tickPolicy": {
                                        "description": "TickPolicy determines what happens when QEMU misses a deadline for injecting a tick to the guest. One of \"delay\", \"catchup\", \"discard\".",
                                        "type": "string"
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "rtc": {
                                    "type": "object",
                                    "properties": {
                                      "present": {
                                        "description": "Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true.",
                                        "type": "boolean"
                                      },
                                      "tickPolicy": {
                                        "description": "TickPolicy determines what happens when QEMU misses a deadline for injecting a tick to the guest. One of \"delay\", \"catchup\".",
                                        "type": "string"
                                      },
                                      "track": {
                                        "description": "Track the guest or the wall clock.",
                                        "type": "string"
                                      }
                                    },
                                    "additionalProperties": false
                                  }
                                },
                                "additionalProperties": false
                              },
                              "timezone": {
                                "description": "Timezone sets the guest clock to the specified timezone. Zone name follows the TZ environment variable format (e.g. 'America/New_York').",
                                "type": "string"
                              },
                              "utc": {
                                "description": "UTC sets the guest clock to UTC on each boot.",
                                "type": "object",
                                "properties": {
                                  "offsetSeconds": {
                                    "description": "OffsetSeconds specifies an offset in seconds, relative to UTC. If set, guest changes to the clock will be kept during reboots and not reset.",
                                    "type": "integer",
                                    "format": "int32"
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          },
                          "cpu": {
                            "description": "CPU allows specifying the CPU topology.",
                            "type": "object",
                            "properties": {
                              "cores": {
                                "description": "Cores specifies the number of cores inside the vmi. Must be a value greater or equal 1.",
                                "type": "integer",
                                "format": "int64"
                              },
                              "dedicatedCpuPlacement": {
                                "description": "DedicatedCPUPlacement requests the scheduler to place the VirtualMachineInstance on a node with enough dedicated pCPUs and pin the vCPUs to it.",
                                "type": "boolean"
                              },
                              "features": {
                                "description": "Features specifies the CPU features list inside the VMI.",
                                "type": "array",
                                "items": {
                                  "description": "CPUFeature allows specifying a CPU feature.",
                                  "type": "object",
                                  "required": [
                                    "name"
                                  ],
                                  "properties": {
                                    "name": {
                                      "description": "Name of the CPU feature",
                                      "type": "string"
                                    },
                                    "policy": {
                                      "description": "Policy is the CPU feature attribute which can have the following attributes: force    - The virtual CPU will claim the feature is supported regardless of it being supported by host CPU. require  - Guest creation will fail unless the feature is supported by the host CPU or the hypervisor is able to emulate it. optional - The feature will be supported by virtual CPU if and only if it is supported by host CPU. disable  - The feature will not be supported by virtual CPU. forbid   - Guest creation will fail if the feature is supported by host CPU. Defaults to require",
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "isolateEmulatorThread": {
                                "description": "IsolateEmulatorThread requests one more dedicated pCPU to be allocated for the VMI to place the emulator thread on it.",
                                "type": "boolean"
                              },
                              "model": {
                                "description": "Model specifies the CPU model inside the VMI. List of available models https://github.com/libvirt/libvirt/tree/master/src/cpu_map. It is possible to specify special cases like \"host-passthrough\" to get the same CPU as the node and \"host-model\" to get CPU closest to the node one. Defaults to host-model.",
                                "type": "string"
                              },
                              "numa": {
                                "type": "object",
                                "properties": {
                                  "guestMappingPassthrough": {
                                    "description": "NUMAGuestMappingPassthrough instructs kubevirt to model numa topology which is compatible with the CPU pinning on the guest. This will result in a subset of the node numa topology being passed through, ensuring that virtual numa nodes and their memory never cross boundaries coming from the node numa mapping.",
                                    "type": "object"
                                  }
                                },
                                "additionalProperties": false
                              },
                              "realtime": {
                                "description": "Realtime holds the tuning knobs specific for realtime workloads.",
                                "type": "object",
                                "properties": {
                                  "mask": {
                                    "description": "Mask defines the vcpu mask expression that defines which vcpus are used for realtime. Format matches libvirt's expressions. Example: \"0-3,^1\",\"0,2,3\",\"2-3\"",
                                    "type": "string"
                                  }
                                },
                                "additionalProperties": false
                              },
                              "sockets": {
                                "description": "Sockets specifies the number of sockets inside the vmi. Must be a value greater or equal 1.",
                                "type": "integer",
                                "format": "int64"
                              },
                              "threads": {
                                "description": "Threads specifies the number of threads inside the vmi. Must be a value greater or equal 1.",
                                "type": "integer",
                                "format": "int64"
                              }
                            },
                            "additionalProperties": false
                          },
                          "devices": {
                            "type": "object",
                            "properties": {
                              "autoattachGraphicsDevice": {
                                "description": "Whether to attach the default graphics device or not. VNC will not be available if set to false. Defaults to true.",
                                "type": "boolean"
                              },
                              "autoattachInputDevice": {
                                "description": "Whether to attach an Input Device. Defaults to false.",
                                "type": "boolean"
                              },
                              "autoattachMemBalloon": {
                                "description": "Whether to attach the Memory balloon device with default period. Period can be adjusted in virt-config. Defaults to true.",
                                "type": "boolean"
                              },
                              "autoattachPodInterface": {
                                "description": "Whether to attach a pod network interface. Defaults to true.",
                                "type": "boolean"
                              },
                              "autoattachSerialConsole": {
                                "description": "Whether to attach the default serial console or not. Serial console access will not be available if set to false. Defaults to true.",
                                "type": "boolean"
                              },
                              "autoattachVSOCK": {
                                "description": "Whether to attach the VSOCK CID to the VM or not. VSOCK access will be available if set to true. Defaults to false.",
                                "type": "boolean"
                              },
                              "blockMultiQueue": {
                                "description": "Whether or not to enable virtio multi-queue for block devices. Defaults to false.",
                                "type": "boolean"
                              },
                              "clientPassthrough": {
                                "description": "Represent a subset of client devices that can be accessed by VMI. At the moment only, USB devices using Usbredir's library and tooling. Another fit would be a smartcard with libcacard.\n\nThe struct is currently empty as there is no immediate request for user-facing APIs. This structure simply turns on USB redirection of UsbClientPassthroughMaxNumberOf devices.",
                                "type": "object"
                              },
                              "disableHotplug": {
                                "description": "DisableHotplug disabled the ability to hotplug disks.",
                                "type": "boolean"
                              },
                              "disks": {
                                "description": "Disks describes disks, cdroms and luns which are connected to the vmi.",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "name"
                                  ],
                                  "properties": {
                                    "blockSize": {
                                      "description": "BlockSize provides the option to change the block size presented to the VM for a disk. Only one of its members may be specified.",
                                      "type": "object",
                                      "properties": {
                                        "custom": {
                                          "description": "CustomBlockSize represents the desired logical and physical block size for a VM disk.",
                                          "type": "object",
                                          "required": [
                                            "logical",
                                            "physical"
                                          ],
                                          "properties": {
                                            "logical": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "physical": {
                                              "type": "integer",
                                              "format": "int32"
                                            }
                                          },
                                          "additionalProperties": false
                                        },
                                        "matchVolume": {
                                          "description": "Represents if a feature is enabled or disabled.",
                                          "type": "object",
                                          "properties": {
                                            "enabled": {
                                              "description": "Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.",
                                              "type": "boolean"
                                            }
                                          },
                                          "additionalProperties": false
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "bootOrder": {
                                      "description": "BootOrder is an integer value > 0, used to determine ordering of boot devices. Lower values take precedence. Each disk or interface that has a boot order must have a unique value. Disks without a boot order are not tried if a disk with a boot order exists.",
                                      "type": "integer",
                                      "format": "int32"
                                    },
                                    "cache": {
                                      "description": "Cache specifies which kvm disk cache mode should be used. Supported values are: CacheNone, CacheWriteThrough.",
                                      "type": "string"
                                    },
                                    "cdrom": {
                                      "type": "object",
                                      "properties": {
                                        "bus": {
                                          "description": "Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi.",
                                          "type": "string"
                                        },
                                        "readonly": {
                                          "description": "ReadOnly. Defaults to true.",
                                          "type": "boolean"
                                        },
                                        "tray": {
                                          "description": "Tray indicates if the tray of the device is open or closed. Allowed values are \"open\" and \"closed\". Defaults to closed.",
                                          "type": "string"
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "dedicatedIOThread": {
                                      "description": "dedicatedIOThread indicates this disk should have an exclusive IO Thread. Enabling this implies useIOThreads = true. Defaults to false.",
                                      "type": "boolean"
                                    },
                                    "disk": {
                                      "type": "object",
                                      "properties": {
                                        "bus": {
                                          "description": "Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi, usb.",
                                          "type": "string"
                                        },
                                        "pciAddress": {
                                          "description": "If specified, the virtual disk will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10",
                                          "type": "string"
                                        },
                                        "readonly": {
                                          "description": "ReadOnly. Defaults to false.",
                                          "type": "boolean"
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "io": {
                                      "description": "IO specifies which QEMU disk IO mode should be used. Supported values are: native, default, threads.",
                                      "type": "string"
                                    },
                                    "lun": {
                                      "type": "object",
                                      "properties": {
                                        "bus": {
                                          "description": "Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi.",
                                          "type": "string"
                                        },
                                        "readonly": {
                                          "description": "ReadOnly. Defaults to false.",
                                          "type": "boolean"
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "name": {
                                      "description": "Name is the device name",
                                      "type": "string"
                                    },
                                    "serial": {
                                      "description": "Serial provides the ability to specify a serial number for the disk device.",
                                      "type": "string"
                                    },
                                    "shareable": {
                                      "description": "If specified the disk is made sharable and multiple write from different VMs are permitted",
                                      "type": "boolean"
                                    },
                                    "tag": {
                                      "description": "If specified, disk address and its tag will be provided to the guest via config drive metadata",
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "filesystems": {
                                "description": "Filesystems describes filesystem which is connected to the vmi.",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "virtiofs"
                                  ],
                                  "properties": {
                                    "name": {
                                      "description": "Name is the device name",
                                      "type": "string"
                                    },
                                    "virtiofs": {
                                      "type": "object"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "gpus": {
                                "description": "Whether to attach a GPU device to the vmi.",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "deviceName"
                                  ],
                                  "properties": {
                                    "deviceName": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "Name of the GPU device as exposed by a device plugin",
                                      "type": "string"
                                    },
                                    "tag": {
                                      "description": "If specified, the virtual network interface address and its tag will be provided to the guest via config drive",
                                      "type": "string"
                                    },
                                    "virtualGPUOptions": {
                                      "type": "object",
                                      "properties": {
                                        "display": {
                                          "type": "object",
                                          "properties": {
                                            "enabled": {
                                              "description": "Enabled determines if a display addapter backed by a vGPU should be enabled or disabled on the guest. Defaults to true.",
                                              "type": "boolean"
                                            },
                                            "ramFB": {
                                              "description": "Represents if a feature is enabled or disabled.",
                                              "type": "object",
                                              "properties": {
                                                "enabled": {
                                                  "description": "Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.",
                                                  "type": "boolean"
                                                }
                                              },
                                              "additionalProperties": false
                                            }
                                          },
                                          "additionalProperties": false
                                        }
                                      },
                                      "additionalProperties": false
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "hostDevices": {
                                "description": "Whether to attach a host device to the vmi.",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "deviceName"
                                  ],
                                  "properties": {
                                    "deviceName": {
                                      "description": "DeviceName is the resource name of the host device exposed by a device plugin",
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "tag": {
                                      "description": "If specified, the virtual network interface address and its tag will be provided to the guest via config drive",
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "inputs": {
                                "description": "Inputs describe input devices",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "type",
                                    "name"
                                  ],
                                  "properties": {
                                    "bus": {
                                      "description": "Bus indicates the bus of input device to emulate. Supported values: virtio, usb.",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "Name is the device name",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "Type indicated the type of input device. Supported values: tablet.",
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "interfaces": {
                                "description": "Interfaces describe network interfaces which are added to the vmi.",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "name"
                                  ],
                                  "properties": {
                                    "acpiIndex": {
                                      "description": "If specified, the ACPI index is used to provide network interface device naming, that is stable across changes in PCI addresses assigned to the device. This value is required to be unique across all devices and be between 1 and (16*1024-1).",
                                      "type": "integer",
                                      "format": "int32"
                                    },
                                    "bootOrder": {
                                      "description": "BootOrder is an integer value > 0, used to determine ordering of boot devices. Lower values take precedence. Each interface or disk that has a boot order must have a unique value. Interfaces without a boot order are not tried.",
                                      "type": "integer",
                                      "format": "int32"
                                    },
                                    "bridge": {
                                      "description": "InterfaceBridge connects to a given network via a linux bridge.",
                                      "type": "object"
                                    },
                                    "dhcpOptions": {
                                      "description": "Extra DHCP options to use in the interface.",
                                      "type": "object",
                                      "properties": {
                                        "bootFileName": {
                                          "description": "If specified will pass option 67 to interface's DHCP server",
                                          "type": "string"
                                        },
                                        "ntpServers": {
                                          "description": "If specified will pass the configured NTP server to the VM via DHCP option 042.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "privateOptions": {
                                          "description": "If specified will pass extra DHCP options for private use, range: 224-254",
                                          "type": "array",
                                          "items": {
                                            "description": "DHCPExtraOptions defines Extra DHCP options for a VM.",
                                            "type": "object",
                                            "required": [
                                              "option",
                                              "value"
                                            ],
                                            "properties": {
                                              "option": {
                                                "description": "Option is an Integer value from 224-254 Required.",
                                                "type": "integer",
                                                "format": "int32"
                                              },
                                              "value": {
                                                "description": "Value is a String value for the Option provided Required.",
                                                "type": "string"
                                              }
                                            },
                                            "additionalProperties": false
                                          }
                                        },
                                        "tftpServerName": {
                                          "description": "If specified will pass option 66 to interface's DHCP server",
                                          "type": "string"
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "macAddress": {
                                      "description": "Interface MAC address. For example: de:ad:00:00:be:af or DE-AD-00-00-BE-AF.",
                                      "type": "string"
                                    },
                                    "macvtap": {
                                      "description": "InterfaceMacvtap connects to a given network by extending the Kubernetes node's L2 networks via a macvtap interface.",
                                      "type": "object"
                                    },
                                    "masquerade": {
                                      "description": "InterfaceMasquerade connects to a given network using netfilter rules to nat the traffic.",
                                      "type": "object"
                                    },
                                    "model": {
                                      "description": "Interface model. One of: e1000, e1000e, ne2k_pci, pcnet, rtl8139, virtio. Defaults to virtio.",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "Logical name of the interface as well as a reference to the associated networks. Must match the Name of a Network.",
                                      "type": "string"
                                    },
                                    "passt": {
                                      "description": "InterfacePasst connects to a given network.",
                                      "type": "object"
                                    },
                                    "pciAddress": {
                                      "description": "If specified, the virtual network interface will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10",
                                      "type": "string"
                                    },
                                    "ports": {
                                      "description": "List of ports to be forwarded to the virtual machine.",
                                      "type": "array",
                                      "items": {
                                        "description": "Port represents a port to expose from the virtual machine. Default protocol TCP. The port field is mandatory",
                                        "type": "object",
                                        "required": [
                                          "port"
                                        ],
                                        "properties": {
                                          "name": {
                                            "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.",
                                            "type": "string"
                                          },
                                          "port": {
                                            "description": "Number of port to expose for the virtual machine. This must be a valid port number, 0 < x < 65536.",
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "protocol": {
                                            "description": "Protocol for port. Must be UDP or TCP. Defaults to \"TCP\".",
                                            "type": "string"
                                          }
                                        },
                                        "additionalProperties": false
                                      }
                                    },
                                    "slirp": {
                                      "description": "InterfaceSlirp connects to a given network using QEMU user networking mode.",
                                      "type": "object"
                                    },
                                    "sriov": {
                                      "description": "InterfaceSRIOV connects to a given network by passing-through an SR-IOV PCI device via vfio.",
                                      "type": "object"
                                    },
                                    "tag": {
                                      "description": "If specified, the virtual network interface address and its tag will be provided to the guest via config drive",
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "networkInterfaceMultiqueue": {
                                "description": "If specified, virtual network interfaces configured with a virtio bus will also enable the vhost multiqueue feature for network devices. The number of queues created depends on additional factors of the VirtualMachineInstance, like the number of guest CPUs.",
                                "type": "boolean"
                              },
                              "rng": {
                                "description": "Rng represents the random device passed from host",
                                "type": "object"
                              },
                              "sound": {
                                "description": "Represents the user's configuration to emulate sound cards in the VMI.",
                                "type": "object",
                                "required": [
                                  "name"
                                ],
                                "properties": {
                                  "model": {
                                    "description": "We only support ich9 or ac97. If SoundDevice is not set: No sound card is emulated. If SoundDevice is set but Model is not: ich9",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "User's defined name for this sound device",
                                    "type": "string"
                                  }
                                },
                                "additionalProperties": false
                              },
                              "tpm": {
                                "type": "object"
                              },
                              "useVirtioTransitional": {
                                "description": "Fall back to legacy virtio 0.9 support if virtio bus is selected on devices. This is helpful for old machines like CentOS6 or RHEL6 which do not understand virtio_non_transitional (virtio 1.0).",
                                "type": "boolean"
                              },
                              "watchdog": {
                                "description": "Named watchdog device.",
                                "type": "object",
                                "required": [
                                  "name"
                                ],
                                "properties": {
                                  "i6300esb": {
                                    "description": "i6300esb watchdog device.",
                                    "type": "object",
                                    "properties": {
                                      "action": {
                                        "description": "The action to take. Valid values are poweroff, reset, shutdown. Defaults to reset.",
                                        "type": "string"
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "name": {
                                    "description": "Name of the watchdog.",
                                    "type": "string"
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          },
                          "features": {
                            "type": "object",
                            "properties": {
                              "acpi": {
                                "description": "Represents if a feature is enabled or disabled.",
                                "type": "object",
                                "properties": {
                                  "enabled": {
                                    "description": "Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.",
                                    "type": "boolean"
                                  }
                                },
                                "additionalProperties": false
                              },
                              "apic": {
                                "type": "object",
                                "properties": {
                                  "enabled": {
                                    "description": "Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.",
                                    "type": "boolean"
                                  },
                                  "endOfInterrupt": {
                                    "description": "EndOfInterrupt enables the end of interrupt notification in the guest. Defaults to false.",
                                    "type": "boolean"
                                  }
                                },
                                "additionalProperties": false
                              },
                              "hyperv": {
                                "description": "Hyperv specific features.",
                                "type": "object",
                                "properties": {
                                  "evmcs": {
                                    "description": "Represents if a feature is enabled or disabled.",
                                    "type": "object",
                                    "properties": {
                                      "enabled": {
                                        "description": "Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.",
                                        "type": "boolean"
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "frequencies": {
                                    "description": "Represents if a feature is enabled or disabled.",
                                    "type": "object",
                                    "properties": {
                                      "enabled": {
                                        "description": "Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.",
                                        "type": "boolean"
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "ipi": {
                                    "description": "Represents if a feature is enabled or disabled.",
                                    "type": "object",
                                    "properties": {
                                      "enabled": {
                                        "description": "Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.",
                                        "type": "boolean"
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "reenlightenment": {
                                    "description": "Represents if a feature is enabled or disabled.",
                                    "type": "object",
                                    "properties": {
                                      "enabled": {
                                        "description": "Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.",
                                        "type": "boolean"
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "relaxed": {
                                    "description": "Represents if a feature is enabled or disabled.",
                                    "type": "object",
                                    "properties": {
                                      "enabled": {
                                        "description": "Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.",
                                        "type": "boolean"
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "reset": {
                                    "description": "Represents if a feature is enabled or disabled.",
                                    "type": "object",
                                    "properties": {
                                      "enabled": {
                                        "description": "Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.",
                                        "type": "boolean"
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "runtime": {
                                    "description": "Represents if a feature is enabled or disabled.",
                                    "type": "object",
                                    "properties": {
                                      "enabled": {
                                        "description": "Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.",
                                        "type": "boolean"
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "spinlocks": {
                                    "type": "object",
                                    "properties": {
                                      "enabled": {
                                        "description": "Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.",
                                        "type": "boolean"
                                      },
                                      "spinlocks": {
                                        "description": "Retries indicates the number of retries. Must be a value greater or equal 4096. Defaults to 4096.",
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "synic": {
                                    "description": "Represents if a feature is enabled or disabled.",
                                    "type": "object",
                                    "properties": {
                                      "enabled": {
                                        "description": "Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.",
                                        "type": "boolean"
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "synictimer": {
                                    "type": "object",
                                    "properties": {
                                      "direct": {
                                        "description": "Represents if a feature is enabled or disabled.",
                                        "type": "object",
                                        "properties": {
                                          "enabled": {
                                            "description": "Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.",
                                            "type": "boolean"
                                          }
                                        },
                                        "additionalProperties": false
                                      },
                                      "enabled": {
                                        "type": "boolean"
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "tlbflush": {
                                    "description": "Represents if a feature is enabled or disabled.",
                                    "type": "object",
                                    "properties": {
                                      "enabled": {
                                        "description": "Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.",
                                        "type": "boolean"
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "vapic": {
                                    "description": "Represents if a feature is enabled or disabled.",
                                    "type": "object",
                                    "properties": {
                                      "enabled": {
                                        "description": "Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.",
                                        "type": "boolean"
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "vendorid": {
                                    "type": "object",
                                    "properties": {
                                      "enabled": {
                                        "description": "Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.",
                                        "type": "boolean"
                                      },
                                      "vendorid": {
                                        "description": "VendorID sets the hypervisor vendor id, visible to the vmi. String up to twelve characters.",
                                        "type": "string"
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "vpindex": {
                                    "description": "Represents if a feature is enabled or disabled.",
                                    "type": "object",
                                    "properties": {
                                      "enabled": {
                                        "description": "Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.",
                                        "type": "boolean"
                                      }
                                    },
                                    "additionalProperties": false
                                  }
                                },
                                "additionalProperties": false
                              },
                              "kvm": {
                                "type": "object",
                                "properties": {
                                  "hidden": {
                                    "description": "Hide the KVM hypervisor from standard MSR based discovery. Defaults to false",
                                    "type": "boolean"
                                  }
                                },
                                "additionalProperties": false
                              },
                              "pvspinlock": {
                                "description": "Represents if a feature is enabled or disabled.",
                                "type": "object",
                                "properties": {
                                  "enabled": {
                                    "description": "Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.",
                                    "type": "boolean"
                                  }
                                },
                                "additionalProperties": false
                              },
                              "smm": {
                                "description": "Represents if a feature is enabled or disabled.",
                                "type": "object",
                                "properties": {
                                  "enabled": {
                                    "description": "Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.",
                                    "type": "boolean"
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          },
                          "firmware": {
                            "type": "object",
                            "properties": {
                              "bootloader": {
                                "description": "Represents the firmware blob used to assist in the domain creation process. Used for setting the QEMU BIOS file path for the libvirt domain.",
                                "type": "object",
                                "properties": {
                                  "bios": {
                                    "description": "If set (default), BIOS will be used.",
                                    "type": "object",
                                    "properties": {
                                      "useSerial": {
                                        "description": "If set, the BIOS output will be transmitted over serial",
                                        "type": "boolean"
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "efi": {
                                    "description": "If set, EFI will be used instead of BIOS.",
                                    "type": "object",
                                    "properties": {
                                      "secureBoot": {
                                        "description": "If set, SecureBoot will be enabled and the OVMF roms will be swapped for SecureBoot-enabled ones. Requires SMM to be enabled. Defaults to true",
                                        "type": "boolean"
                                      }
                                    },
                                    "additionalProperties": false
                                  }
                                },
                                "additionalProperties": false
                              },
                              "kernelBoot": {
                                "description": "Represents the firmware blob used to assist in the kernel boot process. Used for setting the kernel, initrd and command line arguments",
                                "type": "object",
                                "properties": {
                                  "container": {
                                    "description": "If set, the VM will be booted from the defined kernel / initrd.",
                                    "type": "object",
                                    "required": [
                                      "image"
                                    ],
                                    "properties": {
                                      "image": {
                                        "description": "Image that contains initrd / kernel files.",
                                        "type": "string"
                                      },
                                      "imagePullPolicy": {
                                        "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                                        "type": "string"
                                      },
                                      "imagePullSecret": {
                                        "description": "ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.",
                                        "type": "string"
                                      },
                                      "initrdPath": {
                                        "description": "the fully-qualified path to the ramdisk image in the host OS",
                                        "type": "string"
                                      },
                                      "kernelPath": {
                                        "description": "The fully-qualified path to the kernel image in the host OS",
                                        "type": "string"
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "kernelArgs": {
                                    "description": "Arguments to be passed to the kernel at boot time",
                                    "type": "string"
                                  }
                                },
                                "additionalProperties": false
                              },
                              "serial": {
                                "description": "The system-serial-number in SMBIOS",
                                "type": "string"
                              },
                              "uuid": {
                                "description": "UUID reported by the vmi bios. Defaults to a random generated uid.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          },
                          "ioThreadsPolicy": {
                            "description": "Controls whether or not disks will share IOThreads. Omitting IOThreadsPolicy disables use of IOThreads. One of: shared, auto",
                            "type": "string"
                          },
                          "launchSecurity": {
                            "type": "object",
                            "properties": {
                              "sev": {
                                "type": "object"
                              }
                            },
                            "additionalProperties": false
                          },
                          "machine": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "description": "QEMU machine type is the actual chipset of the VirtualMachineInstance.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          },
                          "memory": {
                            "description": "Memory allows specifying the VirtualMachineInstance memory features.",
                            "type": "object",
                            "properties": {
                              "guest": {
                                "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n<quantity>        ::= <signedNumber><suffix>\n  (Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n  (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n  (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber>\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n  a. No precision is lost\n  b. No fractional digits will be emitted\n  c. The exponent (or suffix) is as large as possible.\nThe sign will be omitted unless the number is negative.\n\nExamples:\n  1.5 will be serialized as \"1500m\"\n  1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.",
                                "type": "string"
                              },
                              "hugepages": {
                                "description": "Hugepages allow to use hugepages for the VirtualMachineInstance instead of regular memory.",
                                "type": "object",
                                "properties": {
                                  "pageSize": {
                                    "description": "PageSize specifies the hugepage size, for x86_64 architecture valid values are 1Gi and 2Mi.",
                                    "type": "string"
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          },
                          "resources": {
                            "type": "object",
                            "properties": {
                              "limits": {
                                "description": "Limits describes the maximum amount of compute resources allowed. Valid resource keys are \"memory\" and \"cpu\".",
                                "type": "object"
                              },
                              "overcommitGuestOverhead": {
                                "description": "Don't ask the scheduler to take the guest-management overhead into account. Instead put the overhead only into the container's memory limit. This can lead to crashes if all memory is in use on a node. Defaults to false.",
                                "type": "boolean"
                              },
                              "requests": {
                                "description": "Requests is a description of the initial vmi resources. Valid resource keys are \"memory\" and \"cpu\".",
                                "type": "object"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      },
                      "evictionStrategy": {
                        "description": "EvictionStrategy can be set to \"LiveMigrate\" if the VirtualMachineInstance should be migrated instead of shut-off in case of a node drain.",
                        "type": "string"
                      },
                      "hostname": {
                        "description": "Specifies the hostname of the vmi If not specified, the hostname will be set to the name of the vmi, if dhcp or cloud-init is configured properly.",
                        "type": "string"
                      },
                      "livenessProbe": {
                        "description": "Probe describes a health check to be performed against a VirtualMachineInstance to determine whether it is alive or ready to receive traffic.",
                        "type": "object",
                        "properties": {
                          "exec": {
                            "description": "ExecAction describes a \"run in container\" action.",
                            "type": "object",
                            "properties": {
                              "command": {
                                "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "additionalProperties": false
                          },
                          "failureThreshold": {
                            "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "guestAgentPing": {
                            "description": "GuestAgentPing configures the guest-agent based ping probe",
                            "type": "object"
                          },
                          "httpGet": {
                            "description": "HTTPGetAction describes an action based on HTTP Get requests.",
                            "type": "object",
                            "required": [
                              "port"
                            ],
                            "properties": {
                              "host": {
                                "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                "type": "string"
                              },
                              "httpHeaders": {
                                "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                "type": "array",
                                "items": {
                                  "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "value"
                                  ],
                                  "properties": {
                                    "name": {
                                      "description": "The header field name",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The header field value",
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "path": {
                                "description": "Path to access on the HTTP server.",
                                "type": "string"
                              },
                              "port": {
                                "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                "type": [
                                  "string",
                                  "number"
                                ]
                              },
                              "scheme": {
                                "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          },
                          "initialDelaySeconds": {
                            "description": "Number of seconds after the VirtualMachineInstance has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                            "type": "integer",
                            "format": "int32"
                          },
                          "periodSeconds": {
                            "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "successThreshold": {
                            "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "tcpSocket": {
                            "description": "TCPSocketAction describes an action based on opening a socket",
                            "type": "object",
                            "required": [
                              "port"
                            ],
                            "properties": {
                              "host": {
                                "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                "type": "string"
                              },
                              "port": {
                                "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                "type": [
                                  "string",
                                  "number"
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          "timeoutSeconds": {
                            "description": "Number of seconds after which the probe times out. For exec probes the timeout fails the probe but does not terminate the command running on the guest. This means a blocking command can result in an increasing load on the guest. A small buffer will be added to the resulting workload exec probe to compensate for delays caused by the qemu guest exec mechanism. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                            "type": "integer",
                            "format": "int32"
                          }
                        },
                        "additionalProperties": false
                      },
                      "networks": {
                        "description": "List of networks that can be attached to a vm's virtual interface.",
                        "type": "array",
                        "items": {
                          "description": "Network represents a network type and a resource that should be connected to the vm.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "multus": {
                              "description": "Represents the multus cni network.",
                              "type": "object",
                              "required": [
                                "networkName"
                              ],
                              "properties": {
                                "default": {
                                  "description": "Select the default network and add it to the multus-cni.io/default-network annotation.",
                                  "type": "boolean"
                                },
                                "networkName": {
                                  "description": "References to a NetworkAttachmentDefinition CRD object. Format: <networkName>, <namespace>/<networkName>. If namespace is not specified, VMI namespace is assumed.",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "name": {
                              "description": "Network name. Must be a DNS_LABEL and unique within the vm. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                              "type": "string"
                            },
                            "pod": {
                              "description": "Represents the stock pod network interface.",
                              "type": "object",
                              "properties": {
                                "vmIPv6NetworkCIDR": {
                                  "description": "IPv6 CIDR for the vm network. Defaults to fd10:0:2::/120 if not specified.",
                                  "type": "string"
                                },
                                "vmNetworkCIDR": {
                                  "description": "CIDR for vm network. Default 10.0.2.0/24 if not specified.",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "nodeSelector": {
                        "description": "NodeSelector is a selector which must be true for the vmi to fit on a node. Selector which must match a node's labels for the vmi to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "priorityClassName": {
                        "description": "If specified, indicates the pod's priority. If not specified, the pod priority will be default or zero if there is no default.",
                        "type": "string"
                      },
                      "readinessProbe": {
                        "description": "Probe describes a health check to be performed against a VirtualMachineInstance to determine whether it is alive or ready to receive traffic.",
                        "type": "object",
                        "properties": {
                          "exec": {
                            "description": "ExecAction describes a \"run in container\" action.",
                            "type": "object",
                            "properties": {
                              "command": {
                                "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "additionalProperties": false
                          },
                          "failureThreshold": {
                            "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "guestAgentPing": {
                            "description": "GuestAgentPing configures the guest-agent based ping probe",
                            "type": "object"
                          },
                          "httpGet": {
                            "description": "HTTPGetAction describes an action based on HTTP Get requests.",
                            "type": "object",
                            "required": [
                              "port"
                            ],
                            "properties": {
                              "host": {
                                "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                "type": "string"
                              },
                              "httpHeaders": {
                                "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                "type": "array",
                                "items": {
                                  "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "value"
                                  ],
                                  "properties": {
                                    "name": {
                                      "description": "The header field name",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The header field value",
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "path": {
                                "description": "Path to access on the HTTP server.",
                                "type": "string"
                              },
                              "port": {
                                "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                "type": [
                                  "string",
                                  "number"
                                ]
                              },
                              "scheme": {
                                "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          },
                          "initialDelaySeconds": {
                            "description": "Number of seconds after the VirtualMachineInstance has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                            "type": "integer",
                            "format": "int32"
                          },
                          "periodSeconds": {
                            "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "successThreshold": {
                            "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "tcpSocket": {
                            "description": "TCPSocketAction describes an action based on opening a socket",
                            "type": "object",
                            "required": [
                              "port"
                            ],
                            "properties": {
                              "host": {
                                "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                "type": "string"
                              },
                              "port": {
                                "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                "type": [
                                  "string",
                                  "number"
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          "timeoutSeconds": {
                            "description": "Number of seconds after which the probe times out. For exec probes the timeout fails the probe but does not terminate the command running on the guest. This means a blocking command can result in an increasing load on the guest. A small buffer will be added to the resulting workload exec probe to compensate for delays caused by the qemu guest exec mechanism. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                            "type": "integer",
                            "format": "int32"
                          }
                        },
                        "additionalProperties": false
                      },
                      "schedulerName": {
                        "description": "If specified, the VMI will be dispatched by specified scheduler. If not specified, the VMI will be dispatched by default scheduler.",
                        "type": "string"
                      },
                      "startStrategy": {
                        "description": "StartStrategy can be set to \"Paused\" if Virtual Machine should be started in paused state.",
                        "type": "string"
                      },
                      "subdomain": {
                        "description": "If specified, the fully qualified vmi hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the vmi will not have a domainname at all. The DNS entry will resolve to the vmi, no matter if the vmi itself can pick up a hostname.",
                        "type": "string"
                      },
                      "terminationGracePeriodSeconds": {
                        "description": "Grace period observed after signalling a VirtualMachineInstance to stop after which the VirtualMachineInstance is force terminated.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "tolerations": {
                        "description": "If toleration is specified, obey all the toleration rules.",
                        "type": "array",
                        "items": {
                          "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
                          "type": "object",
                          "properties": {
                            "effect": {
                              "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                              "type": "string"
                            },
                            "key": {
                              "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                              "type": "string"
                            },
                            "tolerationSeconds": {
                              "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                              "type": "integer",
                              "format": "int64"
                            },
                            "value": {
                              "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "topologySpreadConstraints": {
                        "description": "TopologySpreadConstraints describes how a group of VMIs will be spread across a given topology domains. K8s scheduler will schedule VMI pods in a way which abides by the constraints.",
                        "type": "array",
                        "items": {
                          "description": "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
                          "type": "object",
                          "required": [
                            "maxSkew",
                            "topologyKey",
                            "whenUnsatisfiable"
                          ],
                          "properties": {
                            "labelSelector": {
                              "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                              "type": "object",
                              "properties": {
                                "matchExpressions": {
                                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                  "type": "array",
                                  "items": {
                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                    "type": "object",
                                    "required": [
                                      "key",
                                      "operator"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "key is the label key that the selector applies to.",
                                        "type": "string",
                                        "x-kubernetes-patch-merge-key": "key",
                                        "x-kubernetes-patch-strategy": "merge"
                                      },
                                      "operator": {
                                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                        "type": "string"
                                      },
                                      "values": {
                                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "additionalProperties": false
                                  }
                                },
                                "matchLabels": {
                                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              },
                              "additionalProperties": false
                            },
                            "maxSkew": {
                              "description": "MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "topologyKey": {
                              "description": "TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a \"bucket\", and try to put balanced number of pods into each bucket. It's a required field.",
                              "type": "string"
                            },
                            "whenUnsatisfiable": {
                              "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered \"Unsatisfiable\" for an incoming pod if and only if every possible node assignment for that pod would violate \"MaxSkew\" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        "x-kubernetes-list-map-keys": [
                          "topologyKey",
                          "whenUnsatisfiable"
                        ],
                        "x-kubernetes-list-type": "map",
                        "x-kubernetes-patch-merge-key": "topologyKey",
                        "x-kubernetes-patch-strategy": "merge"
                      },
                      "volumes": {
                        "description": "List of volumes that can be mounted by disks belonging to the vmi.",
                        "type": "array",
                        "items": {
                          "description": "Volume represents a named volume in a vmi.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "cloudInitConfigDrive": {
                              "description": "Represents a cloud-init config drive user data source. More info: https://cloudinit.readthedocs.io/en/latest/topics/datasources/configdrive.html",
                              "type": "object",
                              "properties": {
                                "networkData": {
                                  "description": "NetworkData contains config drive inline cloud-init networkdata.",
                                  "type": "string"
                                },
                                "networkDataBase64": {
                                  "description": "NetworkDataBase64 contains config drive cloud-init networkdata as a base64 encoded string.",
                                  "type": "string"
                                },
                                "networkDataSecretRef": {
                                  "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "secretRef": {
                                  "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "userData": {
                                  "description": "UserData contains config drive inline cloud-init userdata.",
                                  "type": "string"
                                },
                                "userDataBase64": {
                                  "description": "UserDataBase64 contains config drive cloud-init userdata as a base64 encoded string.",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "cloudInitNoCloud": {
                              "description": "Represents a cloud-init nocloud user data source. More info: http://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html",
                              "type": "object",
                              "properties": {
                                "networkData": {
                                  "description": "NetworkData contains NoCloud inline cloud-init networkdata.",
                                  "type": "string"
                                },
                                "networkDataBase64": {
                                  "description": "NetworkDataBase64 contains NoCloud cloud-init networkdata as a base64 encoded string.",
                                  "type": "string"
                                },
                                "networkDataSecretRef": {
                                  "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "secretRef": {
                                  "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "userData": {
                                  "description": "UserData contains NoCloud inline cloud-init userdata.",
                                  "type": "string"
                                },
                                "userDataBase64": {
                                  "description": "UserDataBase64 contains NoCloud cloud-init userdata as a base64 encoded string.",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "configMap": {
                              "description": "ConfigMapVolumeSource adapts a ConfigMap into a volume. More info: https://kubernetes.io/docs/concepts/storage/volumes/#configmap",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                  "type": "string"
                                },
                                "optional": {
                                  "description": "Specify whether the ConfigMap or it's keys must be defined",
                                  "type": "boolean"
                                },
                                "volumeLabel": {
                                  "description": "The volume label of the resulting disk inside the VMI. Different bootstrapping mechanisms require different values. Typical values are \"cidata\" (cloud-init), \"config-2\" (cloud-init) or \"OEMDRV\" (kickstart).",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "containerDisk": {
                              "description": "Represents a docker image with an embedded disk.",
                              "type": "object",
                              "required": [
                                "image"
                              ],
                              "properties": {
                                "image": {
                                  "description": "Image is the name of the image with the embedded disk.",
                                  "type": "string"
                                },
                                "imagePullPolicy": {
                                  "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                                  "type": "string"
                                },
                                "imagePullSecret": {
                                  "description": "ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.",
                                  "type": "string"
                                },
                                "path": {
                                  "description": "Path defines the path to disk file in the container",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "dataVolume": {
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "hotpluggable": {
                                  "description": "Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.",
                                  "type": "boolean"
                                },
                                "name": {
                                  "description": "Name of both the DataVolume and the PVC in the same namespace. After PVC population the DataVolume is garbage collected by default.",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "downwardAPI": {
                              "description": "DownwardAPIVolumeSource represents a volume containing downward API info.",
                              "type": "object",
                              "properties": {
                                "fields": {
                                  "description": "Fields is a list of downward API volume file",
                                  "type": "array",
                                  "items": {
                                    "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
                                    "type": "object",
                                    "required": [
                                      "path"
                                    ],
                                    "properties": {
                                      "fieldRef": {
                                        "description": "ObjectFieldSelector selects an APIVersioned field of an object.",
                                        "type": "object",
                                        "required": [
                                          "fieldPath"
                                        ],
                                        "properties": {
                                          "apiVersion": {
                                            "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                            "type": "string"
                                          },
                                          "fieldPath": {
                                            "description": "Path of the field to select in the specified API version.",
                                            "type": "string"
                                          }
                                        },
                                        "additionalProperties": false
                                      },
                                      "mode": {
                                        "description": "Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                                        "type": "integer",
                                        "format": "int32"
                                      },
                                      "path": {
                                        "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                                        "type": "string"
                                      },
                                      "resourceFieldRef": {
                                        "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
                                        "type": "object",
                                        "required": [
                                          "resource"
                                        ],
                                        "properties": {
                                          "containerName": {
                                            "description": "Container name: required for volumes, optional for env vars",
                                            "type": "string"
                                          },
                                          "divisor": {
                                            "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n<quantity>        ::= <signedNumber><suffix>\n  (Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n  (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n  (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber>\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n  a. No precision is lost\n  b. No fractional digits will be emitted\n  c. The exponent (or suffix) is as large as possible.\nThe sign will be omitted unless the number is negative.\n\nExamples:\n  1.5 will be serialized as \"1500m\"\n  1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.",
                                            "type": "string"
                                          },
                                          "resource": {
                                            "description": "Required: resource to select",
                                            "type": "string"
                                          }
                                        },
                                        "additionalProperties": false
                                      }
                                    },
                                    "additionalProperties": false
                                  }
                                },
                                "volumeLabel": {
                                  "description": "The volume label of the resulting disk inside the VMI. Different bootstrapping mechanisms require different values. Typical values are \"cidata\" (cloud-init), \"config-2\" (cloud-init) or \"OEMDRV\" (kickstart).",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "downwardMetrics": {
                              "description": "DownwardMetricsVolumeSource adds a very small disk to VMIs which contains a limited view of host and guest metrics. The disk content is compatible with vhostmd (https://github.com/vhostmd/vhostmd) and vm-dump-metrics.",
                              "type": "object"
                            },
                            "emptyDisk": {
                              "description": "EmptyDisk represents a temporary disk which shares the vmis lifecycle.",
                              "type": "object",
                              "required": [
                                "capacity"
                              ],
                              "properties": {
                                "capacity": {
                                  "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n<quantity>        ::= <signedNumber><suffix>\n  (Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n  (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n  (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber>\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n  a. No precision is lost\n  b. No fractional digits will be emitted\n  c. The exponent (or suffix) is as large as possible.\nThe sign will be omitted unless the number is negative.\n\nExamples:\n  1.5 will be serialized as \"1500m\"\n  1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "ephemeral": {
                              "type": "object",
                              "properties": {
                                "persistentVolumeClaim": {
                                  "description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
                                  "type": "object",
                                  "required": [
                                    "claimName"
                                  ],
                                  "properties": {
                                    "claimName": {
                                      "description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                                      "type": "string"
                                    },
                                    "readOnly": {
                                      "description": "Will force the ReadOnly setting in VolumeMounts. Default false.",
                                      "type": "boolean"
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "additionalProperties": false
                            },
                            "hostDisk": {
                              "description": "Represents a disk created on the cluster level",
                              "type": "object",
                              "required": [
                                "path",
                                "type"
                              ],
                              "properties": {
                                "capacity": {
                                  "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n<quantity>        ::= <signedNumber><suffix>\n  (Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n  (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n  (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber>\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n  a. No precision is lost\n  b. No fractional digits will be emitted\n  c. The exponent (or suffix) is as large as possible.\nThe sign will be omitted unless the number is negative.\n\nExamples:\n  1.5 will be serialized as \"1500m\"\n  1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.",
                                  "type": "string"
                                },
                                "path": {
                                  "description": "The path to HostDisk image located on the cluster",
                                  "type": "string"
                                },
                                "shared": {
                                  "description": "Shared indicate whether the path is shared between nodes",
                                  "type": "boolean"
                                },
                                "type": {
                                  "description": "Contains information if disk.img exists or should be created allowed options are 'Disk' and 'DiskOrCreate'",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "memoryDump": {
                              "type": "object",
                              "required": [
                                "claimName"
                              ],
                              "properties": {
                                "claimName": {
                                  "description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                                  "type": "string"
                                },
                                "hotpluggable": {
                                  "description": "Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.",
                                  "type": "boolean"
                                },
                                "readOnly": {
                                  "description": "Will force the ReadOnly setting in VolumeMounts. Default false.",
                                  "type": "boolean"
                                }
                              },
                              "additionalProperties": false
                            },
                            "name": {
                              "description": "Volume's name. Must be a DNS_LABEL and unique within the vmi. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                              "type": "string"
                            },
                            "persistentVolumeClaim": {
                              "description": "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. Directly attached to the vmi via qemu. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                              "type": "object",
                              "required": [
                                "claimName"
                              ],
                              "properties": {
                                "claimName": {
                                  "description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                                  "type": "string"
                                },
                                "hotpluggable": {
                                  "description": "Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.",
                                  "type": "boolean"
                                },
                                "readOnly": {
                                  "description": "Will force the ReadOnly setting in VolumeMounts. Default false.",
                                  "type": "boolean"
                                }
                              },
                              "additionalProperties": false
                            },
                            "secret": {
                              "description": "SecretVolumeSource adapts a Secret into a volume.",
                              "type": "object",
                              "properties": {
                                "optional": {
                                  "description": "Specify whether the Secret or it's keys must be defined",
                                  "type": "boolean"
                                },
                                "secretName": {
                                  "description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
                                  "type": "string"
                                },
                                "volumeLabel": {
                                  "description": "The volume label of the resulting disk inside the VMI. Different bootstrapping mechanisms require different values. Typical values are \"cidata\" (cloud-init), \"config-2\" (cloud-init) or \"OEMDRV\" (kickstart).",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "serviceAccount": {
                              "description": "ServiceAccountVolumeSource adapts a ServiceAccount into a volume.",
                              "type": "object",
                              "properties": {
                                "serviceAccountName": {
                                  "description": "Name of the service account in the pod's namespace to use. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "sysprep": {
                              "description": "Represents a Sysprep volume source.",
                              "type": "object",
                              "properties": {
                                "configMap": {
                                  "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "secret": {
                                  "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "additionalProperties": false
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          "status": {
            "description": "VirtualMachineStatus represents the status returned by the controller to describe how the VirtualMachine is doing",
            "type": "object",
            "nullable": true,
            "properties": {
              "conditions": {
                "description": "Hold the state information of the VirtualMachine and its VirtualMachineInstance",
                "type": "array",
                "items": {
                  "description": "VirtualMachineCondition represents the state of VirtualMachine",
                  "type": "object",
                  "required": [
                    "type",
                    "status"
                  ],
                  "properties": {
                    "lastProbeTime": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "lastTransitionTime": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "message": {
                      "type": "string"
                    },
                    "reason": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "created": {
                "description": "Created indicates if the virtual machine is created in the cluster",
                "type": "boolean"
              },
              "memoryDumpRequest": {
                "description": "VirtualMachineMemoryDumpRequest represent the memory dump request phase and info",
                "type": "object",
                "required": [
                  "claimName",
                  "phase"
                ],
                "properties": {
                  "claimName": {
                    "description": "ClaimName is the name of the pvc that will contain the memory dump",
                    "type": "string"
                  },
                  "endTimestamp": {
                    "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "fileName": {
                    "description": "FileName represents the name of the output file",
                    "type": "string"
                  },
                  "message": {
                    "description": "Message is a detailed message about failure of the memory dump",
                    "type": "string"
                  },
                  "phase": {
                    "description": "Phase represents the memory dump phase",
                    "type": "string"
                  },
                  "remove": {
                    "description": "Remove represents request of dissociating the memory dump pvc",
                    "type": "boolean"
                  },
                  "startTimestamp": {
                    "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                    "type": "string",
                    "format": "date-time"
                  }
                },
                "additionalProperties": false
              },
              "printableStatus": {
                "description": "PrintableStatus is a human readable, high-level representation of the status of the virtual machine",
                "type": "string"
              },
              "ready": {
                "description": "Ready indicates if the virtual machine is running and ready",
                "type": "boolean"
              },
              "restoreInProgress": {
                "description": "RestoreInProgress is the name of the VirtualMachineRestore currently executing",
                "type": "string"
              },
              "snapshotInProgress": {
                "description": "SnapshotInProgress is the name of the VirtualMachineSnapshot currently executing",
                "type": "string"
              },
              "startFailure": {
                "description": "VirtualMachineStartFailure tracks VMIs which failed to transition successfully to running using the VM status",
                "type": "object",
                "properties": {
                  "consecutiveFailCount": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "lastFailedVMIUID": {
                    "type": "string"
                  },
                  "retryAfterTimestamp": {
                    "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                    "type": "string",
                    "format": "date-time"
                  }
                },
                "additionalProperties": false
              },
              "stateChangeRequests": {
                "description": "StateChangeRequests indicates a list of actions that should be taken on a VMI e.g. stop a specific VMI then start a new one.",
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "action"
                  ],
                  "properties": {
                    "action": {
                      "description": "Indicates the type of action that is requested. e.g. Start or Stop",
                      "type": "string"
                    },
                    "data": {
                      "description": "Provides additional data in order to perform the Action",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "uid": {
                      "description": "Indicates the UUID of an existing Virtual Machine Instance that this change request applies to -- if applicable",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "volumeRequests": {
                "description": "VolumeRequests indicates a list of volumes add or remove from the VMI template and hotplug on an active running VMI.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "addVolumeOptions": {
                      "description": "AddVolumeOptions is provided when dynamically hot plugging a volume and disk",
                      "type": "object",
                      "required": [
                        "name",
                        "disk",
                        "volumeSource"
                      ],
                      "properties": {
                        "disk": {
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "blockSize": {
                              "description": "BlockSize provides the option to change the block size presented to the VM for a disk. Only one of its members may be specified.",
                              "type": "object",
                              "properties": {
                                "custom": {
                                  "description": "CustomBlockSize represents the desired logical and physical block size for a VM disk.",
                                  "type": "object",
                                  "required": [
                                    "logical",
                                    "physical"
                                  ],
                                  "properties": {
                                    "logical": {
                                      "type": "integer",
                                      "format": "int32"
                                    },
                                    "physical": {
                                      "type": "integer",
                                      "format": "int32"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "matchVolume": {
                                  "description": "Represents if a feature is enabled or disabled.",
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "description": "Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.",
                                      "type": "boolean"
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "additionalProperties": false
                            },
                            "bootOrder": {
                              "description": "BootOrder is an integer value > 0, used to determine ordering of boot devices. Lower values take precedence. Each disk or interface that has a boot order must have a unique value. Disks without a boot order are not tried if a disk with a boot order exists.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "cache": {
                              "description": "Cache specifies which kvm disk cache mode should be used. Supported values are: CacheNone, CacheWriteThrough.",
                              "type": "string"
                            },
                            "cdrom": {
                              "type": "object",
                              "properties": {
                                "bus": {
                                  "description": "Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi.",
                                  "type": "string"
                                },
                                "readonly": {
                                  "description": "ReadOnly. Defaults to true.",
                                  "type": "boolean"
                                },
                                "tray": {
                                  "description": "Tray indicates if the tray of the device is open or closed. Allowed values are \"open\" and \"closed\". Defaults to closed.",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "dedicatedIOThread": {
                              "description": "dedicatedIOThread indicates this disk should have an exclusive IO Thread. Enabling this implies useIOThreads = true. Defaults to false.",
                              "type": "boolean"
                            },
                            "disk": {
                              "type": "object",
                              "properties": {
                                "bus": {
                                  "description": "Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi, usb.",
                                  "type": "string"
                                },
                                "pciAddress": {
                                  "description": "If specified, the virtual disk will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10",
                                  "type": "string"
                                },
                                "readonly": {
                                  "description": "ReadOnly. Defaults to false.",
                                  "type": "boolean"
                                }
                              },
                              "additionalProperties": false
                            },
                            "io": {
                              "description": "IO specifies which QEMU disk IO mode should be used. Supported values are: native, default, threads.",
                              "type": "string"
                            },
                            "lun": {
                              "type": "object",
                              "properties": {
                                "bus": {
                                  "description": "Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi.",
                                  "type": "string"
                                },
                                "readonly": {
                                  "description": "ReadOnly. Defaults to false.",
                                  "type": "boolean"
                                }
                              },
                              "additionalProperties": false
                            },
                            "name": {
                              "description": "Name is the device name",
                              "type": "string"
                            },
                            "serial": {
                              "description": "Serial provides the ability to specify a serial number for the disk device.",
                              "type": "string"
                            },
                            "shareable": {
                              "description": "If specified the disk is made sharable and multiple write from different VMs are permitted",
                              "type": "boolean"
                            },
                            "tag": {
                              "description": "If specified, disk address and its tag will be provided to the guest via config drive metadata",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        "dryRun": {
                          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "name": {
                          "description": "Name represents the name that will be used to map the disk to the corresponding volume. This overrides any name set inside the Disk struct itself.",
                          "type": "string"
                        },
                        "volumeSource": {
                          "description": "HotplugVolumeSource Represents the source of a volume to mount which are capable of being hotplugged on a live running VMI. Only one of its members may be specified.",
                          "type": "object",
                          "properties": {
                            "dataVolume": {
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "hotpluggable": {
                                  "description": "Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.",
                                  "type": "boolean"
                                },
                                "name": {
                                  "description": "Name of both the DataVolume and the PVC in the same namespace. After PVC population the DataVolume is garbage collected by default.",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "persistentVolumeClaim": {
                              "description": "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. Directly attached to the vmi via qemu. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                              "type": "object",
                              "required": [
                                "claimName"
                              ],
                              "properties": {
                                "claimName": {
                                  "description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                                  "type": "string"
                                },
                                "hotpluggable": {
                                  "description": "Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.",
                                  "type": "boolean"
                                },
                                "readOnly": {
                                  "description": "Will force the ReadOnly setting in VolumeMounts. Default false.",
                                  "type": "boolean"
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "removeVolumeOptions": {
                      "description": "RemoveVolumeOptions is provided when dynamically hot unplugging volume and disk",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "dryRun": {
                          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "name": {
                          "description": "Name represents the name that maps to both the disk and volume that should be removed",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "x-kubernetes-list-type": "atomic"
              },
              "volumeSnapshotStatuses": {
                "description": "VolumeSnapshotStatuses indicates a list of statuses whether snapshotting is supported by each volume.",
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "name",
                    "enabled"
                  ],
                  "properties": {
                    "enabled": {
                      "description": "True if the volume supports snapshotting",
                      "type": "boolean"
                    },
                    "name": {
                      "description": "Volume name",
                      "type": "string"
                    },
                    "reason": {
                      "description": "Empty if snapshotting is enabled, contains reason otherwise",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
      "type": "object",
      "properties": {
        "continue": {
          "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
          "type": "string"
        },
        "remainingItemCount": {
          "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.",
          "type": "integer",
          "format": "int64"
        },
        "resourceVersion": {
          "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "selfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  },
  "additionalProperties": false,
  "$schema": "http://json-schema.org/schema#"
}